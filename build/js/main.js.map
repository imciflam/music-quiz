{"version":3,"sources":["js/util.js","js/data/game.data.js","js/view.js","js/welcome/welcome-view.js","js/welcome/welcome.js","js/game/game-model.js","js/game/header/header-view.js","js/game/level/level-genre-view.js","js/game/level/level-artist-view.js","js/game/game-view.js","js/game/game.js","js/result/result-view.js","js/result/result.js","js/application.js"],"names":["$$","selector","arguments","length","undefined","window","document","querySelector","changeView","view","appElement","replaceChild","element","$on","eventName","callback","addEventListener","evt","$trigger","customEvent","CustomEvent","detail","dispatchEvent","getLevel","index","levels","getScore","answers","score","reduce","acc","it","point","isCorrect","timeSpent","printResult","statistics","game","endGameMessage","time","getTimeSpent","remainingAttempts","position","statisticsIndexed","map","scoreFromStaticstics","push","sort","a","b","Error","getPosition","stats","place","playersCount","betterThan","Math","round","phrases","AbstractView","template","outer","createElement","innerHTML","firstElementChild","this","trim","_element","render","bind","WelcomeView","data","name","_this$data","button","title","rules","concat","str","arr","samples","artist","image","src","genre","type","questions","answer","label","_ref","welcome","resultTry","isWin","resultTime","content","resultWin","scoreBoard","initialGame","level","welcomeScreen","GameModel","levelsData","newState","state","Object","assign","update","allLevels","RangeError","nextLevel","tick","getCurrentLevel","getAllLevelsTypes","LEVELS_COUNT","resultWinData","errors","getMistakes","resultTryData","HeaderView","zero","value","minutes","parseInt","seconds","mistakeElement","mistakes","LevelGenreView","answerButton","checkboxes","_toConsumableArray","querySelectorAll","forEach","checkbox","some","checked","removeAttribute","setAttribute","_this2","handlerAnswer","preventDefault","target","form","elements","_this$level","string","n","LevelArtistView","audio","GameView","model","audioHandler","bindAudioHandler","updateHeader","header","headerElement","remove","prepend","el","classList","contains","add","previousElementSibling","pause","play","Genre","Artist","GameScreen","_this","answerGenreHandler","answerArtistHandler","resetAnswers","changeLevel","getLevelType","answerObj","isLastLevel","win","Application","showResult","failOnMistakes","updateLevel","timer","setTimeout","clearTimeout","answerMask","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","setAnswer","setGame","split","ResultView","winText","ResultScreen","resultData","TRY","tryData","TIME","timeData","WIN","winData","init","startGame","stopTimer"],"mappings":"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","file":"main.js","sourcesContent":["// create an element\nexport const createElement = template => {\n  const outer = document.createElement(`div`)\n  outer.innerHTML = template\n  return outer.firstElementChild\n}\n\n// select an element\nexport const $$ = (selector, scope = window.document) => {\n  return scope.querySelector(selector)\n}\n\n// get root element\nconst appElement = $$(`.app`)\n\n// replace screen\nexport const changeView = view => {\n  appElement.replaceChild(view.element, $$(`section.main`))\n}\n\n// add event listener on some event\nexport const $on = (eventName, callback, el = appElement) => {\n  el.addEventListener(eventName, evt => {\n    callback(evt)\n  })\n}\n// create a custom event to be triggered on\nexport const $trigger = (eventName, data = null) => {\n  let customEvent = new CustomEvent(eventName, { detail: data })\n  appElement.dispatchEvent(customEvent)\n}\n","// todo: customize later\nconst samples = [\n  {\n    artist: `Kevin MacLeod`,\n    name: `Long Stroll`,\n    image: `https://yt3.ggpht.com/-fkDeGauT7Co/AAAAAAAAAAI/AAAAAAAAAAA/dkF5ZKkrxRo/s900-c-k-no-mo-rj-c0xffffff/photo.jpg`,\n    src: `https://www.youtube.com/audiolibrary_download?vid=91624fdc22fc54ed`,\n    genre: `Jazz`\n  },\n  {\n    artist: `Jingle Punks`,\n    name: `In the Land of Rhinoplasty`,\n    image: `https://i.vimeocdn.com/portrait/992615_300x300`,\n    src: `https://www.youtube.com/audiolibrary_download?vid=dc3b4dc549becd6b`,\n    genre: `Rock`\n  },\n  {\n    artist: `Audionautix`,\n    name: `Travel Light`,\n    image: `http://4.bp.blogspot.com/-kft9qu5ET6U/VPFUBi9W-MI/AAAAAAAACYM/UxXilXKYwOc/s1600/audionautix%2BHalf%2BSize.jpg`,\n    src: `https://www.youtube.com/audiolibrary_download?vid=a127d9b7de8a17cf`,\n    genre: `Country`\n  },\n  {\n    artist: `Riot`,\n    name: `\tLevel Plane`,\n    image: `https://i.ytimg.com/vi/jzgM3m8Vp1k/maxresdefault.jpg`,\n    src: `https://www.youtube.com/audiolibrary_download?vid=dfb828f40096184c`,\n    genre: `R&B`\n  },\n  {\n    artist: `Jingle Punks`,\n    name: `Lucky Day`,\n    image: `https://i.vimeocdn.com/portrait/992615_300x300`,\n    src: `https://www.youtube.com/audiolibrary_download?vid=bcbe5be936a32fb1`,\n    genre: `Pop`\n  },\n  {\n    artist: `Gunnar Olsen`,\n    name: `Home Stretch`,\n    image: `https://f4.bcbits.com/img/0004181452_10.jpg`,\n    src: `https://www.youtube.com/audiolibrary_download?vid=bcbe5be936a32fb1`,\n    genre: `Electronic`\n  }\n]\n\nexport const levels = [\n  {\n    type: `Genre`,\n    title: `Choose Jazz tracks`,\n    questions: [samples[0], samples[1], samples[2], samples[3]],\n    answer: `1000`\n  },\n  {\n    type: `Genre`,\n    title: `Choose Rock tracks`,\n    questions: [samples[0], samples[1], samples[2], samples[3]],\n    answer: `0110`\n  },\n  {\n    type: `Genre`,\n    title: `Choose Country tracks`,\n    questions: [samples[0], samples[1], samples[2], samples[3]],\n    answer: `0010`\n  },\n  {\n    type: `Genre`,\n    title: `Choose R&B tracks`,\n    questions: [samples[0], samples[1], samples[2], samples[3]],\n    answer: `0001`\n  },\n  {\n    type: `Genre`,\n    title: `Choose Pop tracks`,\n    questions: [samples[4], samples[1], samples[2], samples[3]],\n    answer: `1000`\n  },\n  {\n    type: `Genre`,\n    title: `Choose Electronic tracks`,\n    questions: [samples[0], samples[5], samples[2], samples[3]],\n    answer: `0100`\n  },\n  {\n    type: `Artist`,\n    title: `Who performs this song?`,\n    questions: [samples[0], samples[1], samples[2]],\n    src: samples[0].src,\n    answer: 0\n  },\n  {\n    type: `Artist`,\n    title: `Who performs this song?`,\n    questions: [samples[1], samples[2], samples[3]],\n    src: samples[2].src,\n    answer: 1\n  },\n  {\n    type: `Artist`,\n    title: `Who performs this song?`,\n    questions: [samples[3], samples[2], samples[1]],\n    src: samples[1].src,\n    answer: 2\n  },\n  {\n    type: `Artist`,\n    title: `Who performs this song?`,\n    questions: [samples[0], samples[1], samples[2]],\n    src: samples[1].src,\n    answer: 1\n  }\n]\n\nexport const LEVELS_COUNT = 10\nexport const FAST_ANSWER_PERIOD = 30\nexport const MAX_ERRORS_COUNT = 4\nexport const TIME_FOR_GAME = 60 * 5 + 1\n\nconst label = {\n  GAME: `Guess a melody`,\n\n  TITLE_WIN: `You're a true music fan!`,\n  TITLE_WELCOME: `Game rules`,\n  TITLE_FAIL_TIME: `Alas..`,\n  TITLE_FAIL_TRY: `Such a pity!`,\n\n  BUTTON_WELCOME: `Start game`,\n  BUTTON_WIN: `Play again`,\n  BUTTON_FAIL: `Try again`\n}\n\nconst phrases = {\n  timeIsUp: () => `Time is up!<br>You didn't make it on time.`,\n  noMoreAttempts: () =>\n    `You have run out of attempts.<br>Better luck next time!`,\n  win: ({ place, playersCount, betterThan }) =>\n    `You've taken ${place} place out of ${playersCount} players. It's&nbsp;better than &nbsp;${betterThan}%&nbsp; other players' results`\n}\n\nexport const welcome = {\n  name: label.GAME,\n  title: label.TITLE_WELCOME,\n  rules: [\n    `Rules are simple&nbsp;— &nbsp;you have to answer all questions in 5 minites.`,\n    `You can make 3 mistakes.`,\n    `Good luck!`\n  ],\n  button: label.BUTTON_WELCOME\n}\n\nexport const resultTry = {\n  name: label.GAME,\n  title: label.TITLE_FAIL_TRY,\n  button: label.BUTTON_FAIL,\n  isWin: false\n}\n\nexport const resultTime = {\n  name: label.GAME,\n  title: label.TITLE_FAIL_TIME,\n  button: label.BUTTON_FAIL,\n  content: phrases.timeIsUp(),\n  isWin: false\n}\n\nexport const resultWin = {\n  name: label.GAME,\n  title: label.TITLE_WIN,\n  button: label.BUTTON_WIN,\n  isWin: true\n}\n\nexport const scoreBoard = []\n\nexport const initialGame = {\n  level: -1,\n  remainingAttempts: MAX_ERRORS_COUNT,\n  time: TIME_FOR_GAME,\n  answers: []\n}\n\n// copy game object and reassign it\nexport const tick = game => {\n  game = Object.assign({}, game)\n  game.time--\n  return game\n}\n\nexport const getLevel = (index, allLevels = levels) => allLevels[index]\n\nexport const nextLevel = (state, allLevels = levels) => {\n  const index = state.level + 1\n  if (!getLevel(index, allLevels)) {\n    throw new RangeError(`Can't find level ${index}`)\n  }\n  state.level = index\n  return state\n}\n\nexport const startGame = () => {\n  nextLevel()\n}\n\nexport const getAllLevelsTypes = (allLevels = levels) => {\n  return allLevels.map(level => level.type)\n}\n\n//copy game object and reassign it\nexport const setLives = (game, lives) => {\n  if (lives < 0) {\n    throw new RangeError(`Can't set negative lives`)\n  }\n  game = Object.assign({}, game)\n  game.lives = lives\n  return game\n}\n\nexport const getScore = answers => {\n  let score = -1\n  // if all questions were answered\n  if (answers.length === LEVELS_COUNT) {\n    score = answers.reduce((acc, it) => {\n      let point = -2\n      if (it.isCorrect) {\n        // if answer was fast\n        point = it.timeSpent < FAST_ANSWER_PERIOD ? 2 : 1\n      }\n      return acc + point\n    }, 0)\n  }\n  return score\n}\n\nconst getTimeSpent = answers => {\n  let time = answers.reduce((acc, it) => {\n    return acc + it.timeSpent\n  }, 0)\n  return time\n}\n\n// fetching scoreboard and creating array of objs from it, { position, score }\nconst getPosition = (statistics, score) => {\n  const statisticsIndexed = statistics.map(\n    (scoreFromStaticstics, position) => ({\n      position,\n      score: scoreFromStaticstics\n    })\n  )\n\n  // push a new obj\n  statisticsIndexed.push({\n    position: null,\n    score\n  })\n\n  // get new obj's position\n  const position = statisticsIndexed\n    .sort((a, b) => b.score - a.score)\n    .reduce((acc, it, index) => {\n      if (it.position === null) {\n        acc = index\n      }\n      return acc\n    }, -1)\n\n  if (position === -1) {\n    throw new Error(`Can't define position in Scoreboard`)\n  }\n  return position\n}\n\nexport const printResult = (statistics, game) => {\n  let endGameMessage = ``\n  const score = getScore(game.answers)\n  const time = getTimeSpent(game.answers)\n\n  //if time's not up && there's lives\n  if (game.remainingAttempts > 0 && time < TIME_FOR_GAME) {\n    const position = getPosition(statistics, score)\n    statistics.push(score)\n    statistics.sort((a, b) => b - a)\n\n    const stats = {\n      place: position + 1,\n      playersCount: statistics.length,\n      betterThan: Math.round(\n        ((statistics.length - position - 1) * 100) / statistics.length\n      )\n    }\n    endGameMessage = phrases.win(stats)\n  } else {\n    endGameMessage =\n      time > TIME_FOR_GAME ? phrases.timeIsUp() : phrases.noMoreAttempts()\n  }\n\n  return endGameMessage\n}\n\nexport class Timer {\n  constructor(time) {\n    this.time = time\n  }\n\n  get isFinished() {\n    return this.time < 1\n  }\n\n  get time() {\n    return this._time\n  }\n\n  set time(value) {\n    this._time = value\n  }\n\n  tick() {\n    this.time--\n  }\n}\n","import { createElement } from \"./util\";\n\n// base class\nexport default class AbstractView {\n  get template() {\n    throw new Error(`Provide template for view`);\n  }\n\n  render() {\n    return createElement(this.template.trim());\n  }\n  bind() {} // notifies\n  get element() {\n    if (!this._element) {\n      this._element = this.render();\n      this.bind(); //bind to this\n    }\n    return this._element;\n  }\n}\n","import AbstractView from \"../view\"\nimport { $$, $on, $trigger } from \"../util\"\n\nexport default class WelcomeView extends AbstractView {\n  constructor(data) {\n    super()\n    this.data = data\n  }\n\n  get template() {\n    const { name, button, title, rules } = this.data\n    return `\n<section class=\"main main--welcome\">\n  <section class=\"logo\" title=\"${name}\"><h1>${name}</h1></section>\n  <button class=\"main-play\">${button}</button>\n  <h2 class=\"title main-title\">${title}</h2>\n  <p class=\"text main-text\">${rules.reduce((str, it, index, arr) => {\n    const linebreak = index < arr.length - 1 ? `<br>` : ``\n    it = it + linebreak\n    return str + it\n  }, ``)}</p>\n</section>`.trim()\n  }\n\n  // on button click, start game\n  bind() {\n    $on(`click`, () => $trigger(`start`), $$(`.main-play`, this.element))\n  }\n\n  onStart() {}\n}\n","import { changeView } from \"../util\"\nimport WelcomeView from \"./welcome-view\"\nimport { welcome as data } from \"../data/game.data\"\n\nclass WelcomeScreen {\n  constructor() {\n    this.view = new WelcomeView(data)\n  }\n\n  init() {\n    changeView(this.view)\n  }\n}\n\nexport default new WelcomeScreen()\n","import {\n  getLevel,\n  nextLevel,\n  printResult,\n  getScore,\n  getAllLevelsTypes,\n  scoreBoard,\n  tick,\n  levels as levelsData,\n  resultWin as resultWinData,\n  resultTry as resultTryData,\n  MAX_ERRORS_COUNT,\n  LEVELS_COUNT\n} from \"../data/game.data\"\n\nexport default class GameModel {\n  constructor(data = levelsData) {\n    this.data = data\n  }\n\n  // modify new object and return new state, react-style\n  update(newState) {\n    this.state = Object.assign({}, this.state, newState)\n    return this.state\n  }\n\n  resetAnswers(state) {\n    state.answers = []\n  }\n\n  getCurrentLevel() {\n    return getLevel(this.state.level, this.data)\n  }\n\n  nextLevel() {\n    this.update(nextLevel(this.state, this.data))\n  }\n\n  tick() {\n    this.update(tick(this.state))\n  }\n\n  getMistakes() {\n    return MAX_ERRORS_COUNT - this.state.remainingAttempts\n  }\n\n  getLevelType() {\n    return this.getCurrentLevel().type\n  }\n\n  getAllLevelsTypes() {\n    return getAllLevelsTypes()\n  }\n\n  isLastLevel() {\n    return this.state.level === LEVELS_COUNT - 1\n  }\n\n  win() {\n    resultWinData.content = printResult(scoreBoard, this.state)\n    resultWinData.score = getScore(this.state.answers)\n    resultWinData.errors = this.getMistakes()\n  }\n  failOnMistakes() {\n    resultTryData.content = printResult(scoreBoard, this.state)\n  }\n}\n","import AbstractView from \"../../view\"\n\nconst mistakes = errors => {\n  let mistakeElement = ``\n  if (errors > 0) {\n    // create 1 note for each mistake and clump them together\n    while (errors) {\n      mistakeElement += `<img class=\"main-mistake\" src=\"img/wrong-answer.png\" width=\"35\" height=\"49\">`\n      errors--\n    }\n  }\n  return mistakeElement\n}\n\nexport default class HeaderView extends AbstractView {\n  constructor(errors, time) {\n    super()\n    this.errors = errors\n    this.time = time\n  }\n\n  get template() {\n    const minutes = parseInt(this.time / 60, 10)\n    const seconds = this.time - minutes * 60\n    const zero = value => (value < 10 ? `0` : ``) //show 0 if no left\n    return `\n<header>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"timer\" viewBox=\"0 0 780 780\">\n    <circle\n      cx=\"390\" cy=\"390\" r=\"370\"\n      class=\"timer-line\"\n      style=\"filter: url(.#blur); transform: rotate(-90deg) scaleY(-1); transform-origin: center\"></circle>\n\n    <div class=\"timer-value\" xmlns=\"http://www.w3.org/1999/xhtml\">\n      <span class=\"timer-value-mins\">${zero(minutes)}${minutes}</span><!--\n      --><span class=\"timer-value-dots\">:</span><!--\n      --><span class=\"timer-value-secs\">${zero(seconds)}${seconds}</span>\n    </div>\n  </svg>\n  <div class=\"main-mistakes\">\n    ${mistakes(this.errors)}\n  </div>\n</header>`\n  }\n}\n","import AbstractView from \"../../view\"\nimport { $$, $on, $trigger } from \"../../util\"\n\nexport default class LevelGenreView extends AbstractView {\n  constructor(level) {\n    super()\n    this.level = level\n  }\n\n  get template() {\n    const { title, questions } = this.level\n\n    const questionsTemplate = data => {\n      return data.reduce((string, it, index) => {\n        const n = index++\n        const itemTemplate = `\n<div class=\"genre-answer\">\n  <div class=\"player-wrapper\">\n    <div class=\"player\">\n      <audio src=\"${it.src}\"></audio>\n      <button class=\"player-control player-control--play\"></button>\n      <div class=\"player-track\">\n        <span class=\"player-status\"></span>\n      </div>\n    </div>\n  </div>\n  <input type=\"checkbox\" name=\"answer\" value=\"answer-${n}\" id=\"a-${n}\">\n  <label class=\"genre-answer-check\" for=\"a-${n}\"></label>\n</div>`\n        return string + itemTemplate\n      }, ``)\n    }\n\n    return `\n<section class=\"main main--level main--level-genre\">\n  <div class=\"main-wrap\">\n    <h2 class=\"title\">${title}</h2>\n    <form class=\"genre\">\n\n      ${questionsTemplate(questions)}\n\n      <button class=\"genre-answer-send\" type=\"submit\" disabled>Answer</button>\n    </form>\n  </div>\n</section>`.trim()\n  }\n\n  bind() {\n    const answerButton = $$(`.genre-answer-send`, this.element)\n\n    const checkboxes = [\n      ...this.element.querySelectorAll(`.genre-answer input[type=\"checkbox\"]`)\n    ]\n\n    checkboxes.forEach(checkbox => {\n      $on(\n        `change`,\n        () => {\n          if (checkboxes.some(it => it.checked)) {\n            // if at least 1 checkbox checked, unblock button\n            answerButton.removeAttribute(`disabled`)\n          } else {\n            answerButton.setAttribute(`disabled`, `disabled`) // maybe add alert later?\n          }\n        },\n        checkbox\n      )\n    })\n\n    $on(`click`, evt => this.handlerAnswer(evt), answerButton)\n  }\n\n  handlerAnswer(evt) {\n    evt.preventDefault()\n    const answers = [...evt.target.form.elements.answer]\n    $trigger(`answerGenre`, answers) // new event\n  }\n}\n","import AbstractView from \"../../view\"\nimport { $on, $trigger } from \"../../util\"\n\nexport default class LevelArtistView extends AbstractView {\n  constructor(level) {\n    super()\n    this.level = level\n  }\n\n  get template() {\n    const { title, questions, src } = this.level\n\n    const questionsTemplate = data => {\n      // for each element in data - template\n      return data.reduce((string, it, index) => {\n        const n = index++\n        const itemTemplate = `\n<div class=\"main-answer-wrapper\">\n  <input class=\"main-answer-r\" type=\"radio\" id=\"answer-${n}\" name=\"answer\" value=\"val-${n}\"/>\n  <label class=\"main-answer\" for=\"answer-${n}\">\n    <img class=\"main-answer-preview\" src=\"${it.image}\"\n        alt=\"${it.artist}\" width=\"134\" height=\"134\">\n    ${it.artist}\n  </label>\n</div>`.trim()\n        return string + itemTemplate\n      }, ``)\n    }\n    // autoplay, so audio plays automatically\n    return `\n<section class=\"main main--level main--level-genre\">\n  <div class=\"main-wrap\">\n    <h2 class=\"title main-title\">${title}</h2>\n    <div class=\"player-wrapper\">\n      <div class=\"player\">\n        <audio src=\"${src}\" loop autoplay></audio>\n        <button class=\"player-control player-control--pause\"></button>\n        <div class=\"player-track\">\n          <span class=\"player-status\"></span>\n        </div>\n      </div>\n    </div>\n    <form class=\"main-list\">\n\n      ${questionsTemplate(questions)}\n\n    </form>\n  </div>\n</section>`.trim()\n  }\n\n  bind() {\n    const buttons = [...this.element.querySelectorAll(`.main-answer-r`)]\n    buttons.forEach(button => {\n      $on(\n        `change`, // change event fired off\n        () => {\n          const answer = button.form.elements.answer.value\n          $trigger(`answerArtist`, answer) // new event created\n        },\n        button\n      )\n    })\n  }\n}\n","import AbstractView from \"../view\"\nimport HeaderView from \"./header/header-view\"\nimport LevelGenreView from \"./level/level-genre-view\"\nimport LevelArtistView from \"./level/level-artist-view\"\nimport { changeView, $$, $on } from \"../util\"\n\nconst audio = {\n  BUTTON: `player-control`,\n  PLAY: `player-control--pause`,\n  PAUSE: `player-control--play`\n}\n\nexport default class GameView extends AbstractView {\n  constructor(model) {\n    super()\n    this.model = model\n  }\n\n  get template() {\n    return `<section class=\"main\"></section>`\n  }\n\n  bind() {\n    return super.bind()\n  }\n\n  bindAudioHandler() {\n    ;[...this.level.element.querySelectorAll(`.${audio.BUTTON}`)].forEach(\n      button => {\n        $on(`click`, evt => this.audioHandler(evt), button)\n      }\n    )\n  }\n\n  get view() {\n    return {\n      Genre(level) {\n        return new LevelGenreView(level)\n      },\n      Artist(level) {\n        return new LevelArtistView(level)\n      }\n    }\n  }\n\n  updateLevel(type) {\n    this.level = this.view[type](this.model.getCurrentLevel())\n    this.bindAudioHandler()\n    changeView(this.level)\n    this.updateHeader()\n  }\n\n  updateHeader() {\n    const header = new HeaderView(\n      this.model.getMistakes(),\n      this.model.state.time\n    )\n    const headerElement = $$(`section.main > header`) // for old structure\n    if (headerElement !== null) {\n      headerElement.remove()\n    }\n    $$(`section.main`).prepend(header.element)\n  }\n\n  audioHandler(evt) {\n    if (evt && evt.target) {\n      evt.preventDefault()\n      const el = evt.target\n      if (el.classList.contains(audio.PAUSE)) {\n        // play\n        ;[...this.level.element.querySelectorAll(`.${audio.PLAY}`)].forEach(\n          button => {\n            button.classList.remove(audio.PLAY)\n            button.classList.add(audio.PAUSE)\n            button.previousElementSibling.pause()\n          }\n        )\n        el.classList.remove(audio.PAUSE)\n        el.classList.add(audio.PLAY)\n        el.previousElementSibling.play()\n      } else {\n        // pause\n        el.classList.remove(audio.PLAY)\n        el.classList.add(audio.PAUSE)\n        el.previousElementSibling.pause()\n      }\n    }\n  }\n}\n","import { $on } from \"../util\"\nimport { MAX_ERRORS_COUNT, initialGame, levels } from \"../data/game.data\"\nimport Application from \"../application\"\nimport GameModel from \"./game-model\"\nimport GameView from \"./game-view\"\n\nclass GameScreen {\n  constructor(data = levels) {\n    this.model = new GameModel(data)\n    this.view = new GameView(this.model)\n    $on(`answerGenre`, evt => this.answerGenreHandler(evt))\n    $on(`answerArtist`, evt => this.answerArtistHandler(evt))\n  }\n\n  init(state = initialGame) {\n    this.model.resetAnswers(state)\n    this.model.update(state)\n    this.model.nextLevel()\n    this.changeLevel(this.model.getLevelType())\n  }\n\n  setAnswer(answer) {\n    const answerObj = {\n      isCorrect: answer === levels[this.model.state.level].answer,\n      timeSpent: 20\n    }\n    const answers = this.model.state.answers\n    answers.push(answerObj)\n    let remainingAttempts = this.model.state.remainingAttempts\n    if (!answerObj.isCorrect) {\n      remainingAttempts--\n    }\n\n    this.model.update({\n      answers,\n      remainingAttempts\n    })\n  }\n\n  setGame() {\n    if (\n      this.model.isLastLevel() &&\n      this.model.getMistakes() < MAX_ERRORS_COUNT\n    ) {\n      // if last level + enough lives left\n      this.model.win()\n      // Application.win();\n      Application.showResult(`WIN`)\n    } else if (this.model.getMistakes() >= MAX_ERRORS_COUNT) {\n      // too many mistakes\n      this.model.failOnMistakes()\n      // Application.failOnMistakes();\n      Application.showResult(`TRY`)\n    } else {\n      this.model.nextLevel()\n      this.changeLevel(this.model.getLevelType())\n    }\n  }\n\n  changeLevel(type) {\n    this.view.updateLevel(type)\n  }\n\n  tick() {\n    this.model.tick()\n    this.view.updateHeader()\n\n    if (this.model.state.time <= 0) {\n      // Application.failNoMoreTime();\n      Application.showResult(`TIME`)\n    } else {\n      this.timer = setTimeout(() => this.tick(), 1000)\n    }\n  }\n\n  stopTimer() {\n    clearTimeout(this.timer)\n  }\n\n  answerGenreHandler(evt) {\n    const answers = evt.detail\n    let answerMask = ``\n    for (let answer of answers) {\n      answerMask += answer.checked ? 1 : 0\n    }\n    this.setAnswer(answerMask)\n    this.setGame()\n  }\n\n  answerArtistHandler(evt) {\n    const answer = +evt.detail.split(`-`)[1]\n    this.setAnswer(answer)\n    this.setGame()\n  }\n}\n\nexport default GameScreen\n","import AbstractView from \"../view\"\nimport { $$, $on, $trigger } from \"../util\"\n\nexport default class ResultView extends AbstractView {\n  constructor(data) {\n    super()\n    this.data = data\n  }\n\n  get template() {\n    const { name, button, title, content, isWin, score, errors } = this.data\n    const winText = `\nIn&nbsp;3&nbsp;m и 25&nbsp;s\n<br>you&nbsp;got ${score} points (8 quick)\n<br>made ${errors} errors`\n\n    return `\n<section class=\"main main--result\">\n  <section class=\"logo\" title=\"${name}\"><h1>${name}</h1></section>\n\n  <h2 class=\"title\">${title}</h2>\n  <div class=\"main-stat\">\n    ${isWin ? winText : content}\n  </div>\n  ${isWin ? `<span class=\"main-comparison\">${content}</span>` : ``}\n  <span role=\"button\" tabindex=\"0\" class=\"main-replay\">${button}</span>\n</section>`.trim()\n  }\n\n  bind() {\n    $on(`click`, () => $trigger(`replay`), $$(`.main-replay`, this.element))\n  }\n}\n","import { changeView } from \"../util\"\nimport ResultView from \"./result-view\"\n\nexport default class ResultScreen {\n  constructor(data) {\n    this.view = new ResultView(data)\n  }\n\n  init() {\n    changeView(this.view)\n  }\n}\n","import welcomeScreen from \"./welcome/welcome\"\nimport GameScreen from \"./game/game\"\nimport ResultScreen from \"./result/result\"\nimport {\n  levels as levelsData,\n  resultWin as winData,\n  resultTry as tryData,\n  resultTime as timeData,\n  initialGame\n} from \"./data/game.data\"\nimport { $on } from \"./util\"\n\nconst resultData = {\n  TRY: tryData,\n  TIME: timeData,\n  WIN: winData\n}\n\nexport default class Application {\n  static init(data) {\n    welcomeScreen.init()\n    Application.game = new GameScreen(data)\n    $on(`start`, Application.startGame)\n    $on(`replay`, Application.startGame)\n  }\n\n  static startGame(evt, state = initialGame) {\n    Application.game.init(state)\n    Application.game.tick()\n  }\n\n  static showResult(type) {\n    Application.game.stopTimer()\n    const resultScreen = new ResultScreen(resultData[type])\n    resultScreen.init()\n  }\n}\n\nApplication.init(levelsData)\n"]}